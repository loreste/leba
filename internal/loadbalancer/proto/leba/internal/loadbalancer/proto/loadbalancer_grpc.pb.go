// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: loadbalancer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadBalancer_AddBackend_FullMethodName    = "/loadbalancer.LoadBalancer/AddBackend"
	LoadBalancer_RemoveBackend_FullMethodName = "/loadbalancer.LoadBalancer/RemoveBackend"
	LoadBalancer_ListBackends_FullMethodName  = "/loadbalancer.LoadBalancer/ListBackends"
)

// LoadBalancerClient is the client API for LoadBalancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadBalancerClient interface {
	AddBackend(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (*BackendResponse, error)
	RemoveBackend(ctx context.Context, in *RemoveBackendRequest, opts ...grpc.CallOption) (*BackendResponse, error)
	ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*ListBackendsResponse, error)
}

type loadBalancerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalancerClient(cc grpc.ClientConnInterface) LoadBalancerClient {
	return &loadBalancerClient{cc}
}

func (c *loadBalancerClient) AddBackend(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (*BackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendResponse)
	err := c.cc.Invoke(ctx, LoadBalancer_AddBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerClient) RemoveBackend(ctx context.Context, in *RemoveBackendRequest, opts ...grpc.CallOption) (*BackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendResponse)
	err := c.cc.Invoke(ctx, LoadBalancer_RemoveBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerClient) ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*ListBackendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackendsResponse)
	err := c.cc.Invoke(ctx, LoadBalancer_ListBackends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerServer is the server API for LoadBalancer service.
// All implementations must embed UnimplementedLoadBalancerServer
// for forward compatibility.
type LoadBalancerServer interface {
	AddBackend(context.Context, *BackendRequest) (*BackendResponse, error)
	RemoveBackend(context.Context, *RemoveBackendRequest) (*BackendResponse, error)
	ListBackends(context.Context, *ListBackendsRequest) (*ListBackendsResponse, error)
	mustEmbedUnimplementedLoadBalancerServer()
}

// UnimplementedLoadBalancerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadBalancerServer struct{}

func (UnimplementedLoadBalancerServer) AddBackend(context.Context, *BackendRequest) (*BackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackend not implemented")
}
func (UnimplementedLoadBalancerServer) RemoveBackend(context.Context, *RemoveBackendRequest) (*BackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBackend not implemented")
}
func (UnimplementedLoadBalancerServer) ListBackends(context.Context, *ListBackendsRequest) (*ListBackendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackends not implemented")
}
func (UnimplementedLoadBalancerServer) mustEmbedUnimplementedLoadBalancerServer() {}
func (UnimplementedLoadBalancerServer) testEmbeddedByValue()                      {}

// UnsafeLoadBalancerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalancerServer will
// result in compilation errors.
type UnsafeLoadBalancerServer interface {
	mustEmbedUnimplementedLoadBalancerServer()
}

func RegisterLoadBalancerServer(s grpc.ServiceRegistrar, srv LoadBalancerServer) {
	// If the following call pancis, it indicates UnimplementedLoadBalancerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadBalancer_ServiceDesc, srv)
}

func _LoadBalancer_AddBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).AddBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancer_AddBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).AddBackend(ctx, req.(*BackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancer_RemoveBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).RemoveBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancer_RemoveBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).RemoveBackend(ctx, req.(*RemoveBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancer_ListBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).ListBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancer_ListBackends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).ListBackends(ctx, req.(*ListBackendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadBalancer_ServiceDesc is the grpc.ServiceDesc for LoadBalancer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadBalancer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loadbalancer.LoadBalancer",
	HandlerType: (*LoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBackend",
			Handler:    _LoadBalancer_AddBackend_Handler,
		},
		{
			MethodName: "RemoveBackend",
			Handler:    _LoadBalancer_RemoveBackend_Handler,
		},
		{
			MethodName: "ListBackends",
			Handler:    _LoadBalancer_ListBackends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadbalancer.proto",
}
